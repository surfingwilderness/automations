"""
This is a pseudocode representation of the Tines automation story for user lifecycle notifications
"""

BEGIN OktaWebhookListener
    LOOP continuously
        IF request received
            events = extract event data from request
            
            IF events is successful
                check_db_tables()
                user = fetch okta_user info using event.userid
                FOR each entry event in events
                    store_and_notify(event,user)
                END FOR
            END IF
        END IF
    END LOOP
END FUNCTION

# Define function to send notifications to Slack
BEGIN slack_notify(event)
    message = parse data and write a message
    send message to Slack with (message)
END FUNCTION

# Define function to save data to database 
BEGIN store_and_notify(event, user)
    payload = parse data to db table schema
    IF user.status is "PROVISIONED" OR "STAGED"
        store payload in database table "joiners"
    ELSE IF user.status is "ACTIVE"
        store payload in database table "movers"
    ELSE IF user.status is "SUSPENDED" OR "DEPROVISIONED"
        store payload in database table "leavers"
    END IF
    call slack_notify(user)
END FUNCTION

# Check if database tables exist and create if needed
BEGIN check_db_tables()
    db_tables = list database tables
    IF "joiners" not in db_tables
        create db table "joiners"
    IF "movers" not in db_tables
        create db table "movers"
    IF "leavers" not in db_tables
        create db table "leavers"
END FUNCTION